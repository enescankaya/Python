import json
import os
from datetime import datetime

class Task:
    def __init__(self, description, due_date=None, priority=0, completed=False):
        self.description = description
        self.due_date = due_date
        self.priority = priority
        self.completed = completed

    def toggle_completion(self):
        self.completed = not self.completed

class TaskManager:
    def __init__(self):
        self.tasks = []

    def add_task(self, description, due_date=None, priority=0):
        self.tasks.append(Task(description, due_date, priority))

    def complete_task(self, index):
        if 0 <= index < len(self.tasks):
            self.tasks[index].toggle_completion()
        else:
            print("Invalid task index.")

    def view_tasks(self):
        if self.tasks:
            for i, task in enumerate(self.tasks):
                status = "Done" if task.completed else "Pending"
                due_date = task.due_date.strftime("%Y-%m-%d") if task.due_date else "None"
                print(f"{i+1}. {task.description} - Priority: {task.priority} - Due Date: {due_date} - {status}")
        else:
            print("No tasks available.")

    def save_tasks(self, filename):
        with open(filename, "w") as file:
            json.dump([{"description": task.description, "due_date": task.due_date.strftime("%Y-%m-%d") if task.due_date else None,
                        "priority": task.priority, "completed": task.completed} for task in self.tasks], file)

    def load_tasks(self, filename):
        if os.path.exists(filename):
            with open(filename, "r") as file:
                data = json.load(file)
                self.tasks = [Task(task["description"], datetime.strptime(task["due_date"], "%Y-%m-%d") if task["due_date"] else None,
                                   task["priority"], task["completed"]) for task in data]
        else:
            print("File not found.")

    def search_tasks(self, keyword):
        result = [task for task in self.tasks if keyword.lower() in task.description.lower()]
        if result:
            for i, task in enumerate(result):
                status = "Done" if task.completed else "Pending"
                due_date = task.due_date.strftime("%Y-%m-%d") if task.due_date else "None"
                print(f"{i+1}. {task.description} - Priority: {task.priority} - Due Date: {due_date} - {status}")
        else:
            print("No matching tasks found.")

    def sort_tasks_by_priority(self):
        self.tasks.sort(key=lambda x: x.priority, reverse=True)

    def filter_tasks_by_completion(self, completed):
        result = [task for task in self.tasks if task.completed == completed]
        if result:
            for i, task in enumerate(result):
                status = "Done" if task.completed else "Pending"
                due_date = task.due_date.strftime("%Y-%m-%d") if task.due_date else "None"
                print(f"{i+1}. {task.description} - Priority: {task.priority} - Due Date: {due_date} - {status}")
        else:
            print("No tasks found with the specified completion status.")

def main():
    task_manager = TaskManager()
    filename = "tasks.json"

    if os.path.exists(filename):
        task_manager.load_tasks(filename)
    
    while True:
        print("\nTask Manager")
        print("1. Add Task")
        print("2. Complete Task")
        print("3. View Tasks")
        print("4. Save Tasks")
        print("5. Search Tasks")
        print("6. Sort Tasks by Priority")
        print("7. Filter Tasks by Completion")
        print("8. Exit")

        choice = input("Enter your choice: ")

        if choice == "1":
            description = input("Enter task description: ")
            due_date = input("Enter due date (YYYY-MM-DD): ")
            priority = int(input("Enter priority (1 - 10): "))
            task_manager.add_task(description, datetime.strptime(due_date, "%Y-%m-%d"), priority)
        elif choice == "2":
            task_manager.view_tasks()
            index = int(input("Enter task index to mark as complete: ")) - 1
            task_manager.complete_task(index)
        elif choice == "3":
            task_manager.view_tasks()
        elif choice == "4":
            task_manager.save_tasks(filename)
            print("Tasks saved successfully.")
        elif choice == "5":
            keyword = input("Enter keyword to search tasks: ")
            task_manager.search_tasks(keyword)
        elif choice == "6":
            task_manager.sort_tasks_by_priority()
            print("Tasks sorted by priority.")
        elif choice == "7":
            completed = input("Enter completion status (done/pending): ")
            task_manager.filter_tasks_by_completion(completed.lower() == "done")
        elif choice == "8":
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
